#!/bin/env bash

exec {SUCCESS}> >( perl -e '$|=1; while(sysread STDIN,$LINE,9999)
                          { # Bold Green
                            printf "\x1B[1m\x1B[32m%s\x1B[0m", $LINE
                          }'
          )

exec {DEBUG}> >( perl -e '$|=1; while(sysread STDIN,$LINE,9999)
                          { # Bold Cyan
                            printf "\x1B[1m\x1B[36m%s\x1B[0m", $LINE
                          }'
          )

exec {ERROR}> >( perl -e '$|=1; while(sysread STDIN,$LINE,9999)
                          { # [ Bold Red ] - Normal Text
                            printf "[\x1B[1m\x1B[31mERROR\x1B[0m]: %s", $LINE
                          }'
          )

exec {CHILD}> >( perl -e '$|=1; while(sysread STDIN,$LINE,9999)
                          { # Faint Text
                            printf "\x1B[2m%s\x1B[0m", $LINE
                          }'
          )


# Example of using File Desciptors to redirect specific output
printf "%s\n"  "--------------------------------------------"
printf "%s\n"  "   B A S H    L O G G I N G    D E M O      "
printf "%s\n"  "--------------------------------------------"
printf "%s\n"  "Base proccess doing things."
printf "%s\n"  "Sub proccess doing things 1/3....." >&${CHILD}; sleep 1
printf "%s\n"  "Sub proccess doing things 2/3....." >&${CHILD}; sleep 1
printf "%s\n"  "Sub proccess doing things 3/3....." >&${CHILD}; sleep 1
printf "%s\n"  "Sub proccess executed... SUCCESSFULLY!" >&${SUCCESS}; sleep 1
printf "%s\n"  "Exit-Code:2 - error example" >&${ERROR}; sleep 0.5
printf "%s\n"  "debugging example" >&${DEBUG}; sleep 1
printf "%s\n"   "--------------------------------------------"
printf "\n"


# Example of trapping STDERR
exec 2>&${ERROR} # Set's all stderr to be redirected to ERROR
phoney_command_caught_by_ERROR

# Resetting stderr to be displayed via stdout
exec 2>&1
phoney_command_boring_stdout